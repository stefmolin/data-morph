[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "data_morph"
authors = [
    {name = "Stefanie Molin", email = "24376333+stefmolin@users.noreply.github.com"},
    {name = "Aaron Stevens", email = "bheklilr2@gmail.com"},
    {name = "Justin Matejka", email = "Justin.Matejka@Autodesk.com"}
]
description = "Teaching tool on the importance of data visualization."
readme = "README.rst"
keywords = ["data visualization", "summary statistics", "data animation"]
license = {file = "LICENSE"}
classifiers = [
    "Framework :: Matplotlib",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Visualization",
]
requires-python = ">=3.9"
dependencies = [
    "matplotlib>=3.3",
    "numpy>=1.20",
    "pandas>=1.2",
    "pytweening>=1.0.3",
    "scipy>=1.10.0",
    "tqdm>=4.64.1",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-randomly",
]
docs = [
    "sphinx>=6.1.3",
    "pydata-sphinx-theme>=0.13.1",
    "sphinx_copybutton>=0.5.1",
]

[project.scripts]
data-morph = "data_morph.cli:main"

[project.urls]
source = "https://github.com/stefmolin/data-morph"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"data_morph.data.starter_shapes" = ["*"]
"data_morph.plotting.config" = ["*"]

[tool.setuptools.dynamic]
version = {attr = "data_morph.__version__"}

# configuration for supported pre-commit hooks
[tool.codespell]
ignore-words-list = "recuse"
ignore-regex = 'https://([\w/\.])+'

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311"]
skip-string-normalization = true
exclude = '''
/(
    \.eggs         # exclude a few common directories in the
  | \.git          # root of the project
  | \.vscode
  | build
)/
'''

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 100
exclude = ["setup.py", "docs", "build"]
verbose = 2
quiet = false
color = true
omit-covered-files = false
# TODO: revisit this later when I add badges to the README
# generate-badge = "."
# badge-format = "svg"

[tool.isort]
atomic = true
profile = "black"
line_length = 88
skip_gitignore = true

[tool.pytest.ini_options]
addopts = [
    "-ra",
    "-l",
    "-v",
    "--tb=short",
    "--import-mode=importlib",
    "--strict-markers",
    "--strict-config",
    "--cov=data_morph",
    "--cov=tests",
    "--cov-report=term-missing",
    "--cov-fail-under=90",
    "--no-cov-on-fail",
]
xfail_strict = true
testpaths = ["tests"]
markers = [
    "bad_input_to_argparse: Run tests on input validation for argparse.",
    "bounds: Run tests on bounds logic.",
    "circles: Run tests on circular shapes.",
    "cli: Run tests involving the CLI.",
    "dataset: Run tests on Dataset logic.",
    "input_validation: Run tests on input validation.",
    "lines: Run tests on LineCollection and related shapes.",
    "morpher: Run tests on the morphing process,",
    "points: Run tests on PointCollection and related shapes.",
    "shapes: Run tests related to shapes.",
]

[tool.numpydoc_validation]
ignore = [
    "EX01",
    "SA01",
    "SS06",
    "ES01",
]
override_SS05 = '^((Process|Assess|Access) )'
override_GL08 = '^(__(init|repr|str)__)$'
